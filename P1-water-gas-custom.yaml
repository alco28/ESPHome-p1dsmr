#  ⬇ Config your entity names here:  ⬇ # 
substitutions:
  device_description: P1 poort smartmeter lezer en waterverbruik
  friendly_name:  P1-smartmeter_watermeter
  devicename: p1-dsmr-watermeter 
  
esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: true
  name_add_mac_suffix: false

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: “${devicename} Fallback AP"
    password: !secret fallback_ap_password

  manual_ip:
    static_ip: 192.168.1.152
    gateway: 192.168.1.1
    subnet: 255.255.255.0

captive_portal:


# ⬇ Enable Home Assistant API ⬇ 
ota:
 password: !secret ota_password
 safe_mode: true  #go to safe_mode if update fails
 num_attempts: 5

api:
 #password: !secret api_password
 encryption:
  key:  !secret api_key_password

# ⬇ Enable webinterface ⬇ 
web_server:
  port: 80
  include_internal: true

# Disable logging (uses the same uart as P1)
logger:
  level: WARN
  baud_rate: 0


dsmr:
  id: dsmr_instance
  max_telegram_length: 1500

# ⬇ trottle the DSMR telegram OUTPUT for every X-seconds, DSMR5.0 default: 1 msg/second⬇ 
  request_interval:  10s
  
uart:
  - rx_pin: RX
    baud_rate: 115200
    rx_buffer_size: 1700 #1024


#----------------------end of config--------------------------------------------------------#

#  ⬇ Default globals for watermeter statistics  ⬇ # 
globals:
 - id: main_counter_pulses
   type: int
   restore_value: yes
   initial_value: '0'
 - id: secondary_counter_pulses
   type: int
   restore_value: yes
   initial_value: '0'
 - id: event_quantity
   type: int
   restore_value: no
   initial_value: '0'
 - id: last_event_quantity
   type: int
   restore_value: no
   initial_value: '0'
 - id: event_counter
   type: int
   restore_value: no
   initial_value: '0'
 - id: current_event_quantity
   type: int
   restore_value: no
   initial_value: '0'

script:
  - id: reset_main_counter
    then:
      - lambda: |-
          id(main_counter_pulses) = 0;
          id(water_main_consumption).publish_state(id(main_counter_pulses));

  - id: reset_secondary_counter
    then:
      - lambda: |-
          id(secondary_counter_pulses) = 0;
          id(water_secondary_consumption).publish_state(id(secondary_counter_pulses));

  - id: publish_states
    then:
      - lambda: |-
          id(water_main_consumption).publish_state(id(main_counter_pulses));
          id(water_secondary_consumption).publish_state(id(secondary_counter_pulses));


#  ⬇ Enable time component voor reset elke nacht ⬇ #
time:
  - platform: homeassistant
    id: time_homeassistant
        
sensor:
  #------------------------# Watermeter #------------------------#
  # - platform: integration
  #   name: "Water usage"
  #   sensor: water_pulse_counter
  #   time_unit: min
  #   accuracy_decimals: 0
  #   unit_of_measurement: "liter"
  #   restore: true

  # - platform: integration
  #   unit_of_measurement: "liter"
  #   name: "Water usage day"
  #   sensor: water_pulse_counter
  #   time_unit: d
  #   accuracy_decimals: 0
  #   restore: true
  #   internal: true


  # - platform: pulse_counter
  #   pin: GPIO2
  #   id: water_pulse_counter
  #   name: "water pulse counter"
  #   state_class: measurement
  #   icon: "mdi:water"
  #   internal_filter: 100ms #10us
  #   update_interval: 10s
  #   accuracy_decimals: 0
  #   unit_of_measurement: "L/min"
   # filters:
       #- delayed_on_off: 50ms



  #------------------------# P1 DSMR meter #------------------------#
  - platform: dsmr
    energy_delivered_tariff1:
      name: "Energy Consumed Tariff 1"
      id: EDT1
    #  state_class: total_increasing
      unit_of_measurement: "kWh" 
      # filters:
  
      # - lambda: |-
      #     static float last_value = NAN;
      #     if (isnan(last_value) || id(EDT1).state >= last_value) {
      #       last_value = id(EDT1).state;
      #       return id(EDT1).state;
      #     } else {
      #       return NAN;
      #     }
    energy_delivered_tariff2:
      name: "Energy Consumed Tariff 2"
      id: EDT2
     # state_class: total_increasing
      unit_of_measurement: "kWh"       
      # filters:
      # #- filter_out: nan
      # - lambda: |-
      #     static float last_value = NAN; 
      #     if (isnan(last_value) || id(EDT2).state >= last_value) {
      #       last_value = id(EDT2).state;
      #       return id(EDT2).state;
      #     } else {
      #       return NAN;
      #     }
    energy_returned_tariff1:
      name: "Energy Produced Tariff 1"
      id: EDR1
      icon: mdi:CurrencyEur
     # state_class: total_increasing
      unit_of_measurement: "kWh"
      filters:
      - filter_out: nan   

    energy_returned_tariff2:
      name: "Energy Produced Tariff 2"
      id: EDR2
    #  state_class: total_increasing
      unit_of_measurement: "kWh"
      filters:
      - filter_out: nan   
     
    power_delivered:
      name: "Power Consumed"
      id: PowerC
     # accuracy_decimals: 3
      # unit_of_measurement: "W"
    power_returned:
      name: "Power Produced"
      id: PowerR
     # accuracy_decimals: 3
      # unit_of_measurement: "W"
    current_l1:
      name: "Current Phase 1"
      icon: mdi:alternating-current   
    electricity_failures:
      name: "Electricity Failures"
      icon: mdi:alert
    electricity_long_failures:
      name: "Long Electricity Failures"
      icon: mdi:alert
    voltage_l1:
      name: "Voltage Phase 1"
      icon: mdi:high-voltage
    voltage_l2:
      name: "Voltage Phase 2"
      icon: mdi:high-voltage
    voltage_l3:
      name: "Voltage Phase 3"
      icon: mdi:high-voltage
    
  # ⬇ 3 phase systems are disabled by default in HA frontend, enable here or in the HA frontend  ⬇ #
    current_l2:
      disabled_by_default: true
      name: "Current Phase 2"
      icon: mdi:alternating-current
    current_l3:
      disabled_by_default: true
      name: "Current Phase 3"
      icon: mdi:alternating-current
    
    power_delivered_l1:
      disabled_by_default: true
      name: "Power Consumed Phase 1"
      accuracy_decimals: 3

    power_delivered_l2:
      disabled_by_default: true
      name: "Power Consumed Phase 2"
      accuracy_decimals: 3

    power_delivered_l3:
      disabled_by_default: true
      name: "Power Consumed Phase 3"
      accuracy_decimals: 3


    power_returned_l1:
      disabled_by_default: true
      name: "Power Produced Phase 1"
      accuracy_decimals: 3
  
    power_returned_l2:
      disabled_by_default: true
      name: "Power Produced Phase 2"
      accuracy_decimals: 3

    power_returned_l3:
      disabled_by_default: true
      name: "Power Produced Phase 3"
      unit_of_measurement: "W"
      accuracy_decimals: 3


  #----------------------------------------⬇GASMETER⬇----------------------------------------------------#

 # ⬇ disable when no gasmeter is used ⬇ #    
    gas_delivered:
      name: "Gas Consumed"
      icon: mdi:GasCylinder
      device_class: 'gas'
      state_class: total_increasing
      unit_of_measurement: "m³"

 #--------------------------------------⬇TEMPLATE SENSORS⬇-----------------------------------------------#
  - platform: template
    name: total energy consumed
    unit_of_measurement: "kWh"
    state_class: "total_increasing"
    lambda: |-
      if ((id(EDT1).state + id(EDT2).state) > 0) {
        return (id(EDT1).state + id(EDT2).state);
      } else {
        return 0;
      }
    # return (id(EDT1).state + id(EDT2).state);    


  - platform: template
    name: total energy returned
    lambda: |-
      return (id(EDR1).state + id(EDR2).state);    
    unit_of_measurement: "kWh"
    state_class: "total_increasing"
    


  ##------------------------- ⬇ Watermeter template sensors for stats ⬇ -------------##

  - platform: template
    id: water_main_consumption
    name: "Water verbruik Liter"
    unit_of_measurement: "L"
    state_class: "total_increasing"
    device_class: 'water'
    accuracy_decimals: 0
    icon: "mdi:cube-outline"

  - platform: template
    id: watermeter_total
    name: "watermeter totaal stand"
    state_class: "total_increasing"
    icon: mdi:water
    #update_interval: 6s
    unit_of_measurement: "m³"
    device_class: 'water'
    accuracy_decimals: 3
    lambda:  return ( (id(water_main_consumption).state) * 0.001);

  - platform: template
    id: water_secondary_consumption
    name: "secondary water verbruik"
    unit_of_measurement: "L"
    device_class: 'water'
    accuracy_decimals: 0
    icon: "mdi:water"

  - platform: template
    id: current_water_consumption
    name: "current water consumption"
    unit_of_measurement: "L"
    device_class: 'water'
    accuracy_decimals: 0
    icon: "mdi:water"

  - platform: template
    id: last_water_consumption
    name: "last water consumption"
    unit_of_measurement: "L"
    device_class: 'water'
    accuracy_decimals: 0
    icon: "mdi:water"

binary_sensor:
# Nabijheidssensor
  - platform: gpio
    id: water_pulse_counter
    pin: GPIO2
    internal: true
    filters:
      #- delayed_on_off: 50ms
      - lambda: |-
          id(main_counter_pulses) += x;
          id(secondary_counter_pulses) += x;
          id(event_quantity) += x;            
          return x;
    on_state: #on_state
        - script.execute: publish_states    


interval:
  # Saves the last consumption
   # An event is published when a water flow (>= 1L / 15 seconds) is
  # detected and followed by a stop of consumption for a defined time.
  - interval: 15sec
    then:
      - lambda: |-
          if (id(event_quantity) != id(last_event_quantity)) {
            // Water continues to flow
            // Reset event counter
            id(event_counter) = 0;
          } else {
            // Water no longer flows
            if (id(event_quantity)) {
              // 4 * 15 * 5 = 5min
              if (id(event_counter) < 4 * 5) {
                // Timeout is not reaches
                id(event_counter)++;
              } else {
                  // Timeout is reaches
                  id(last_water_consumption).publish_state(id(event_quantity));
                  // Send event to Home Assistant
                  api::HomeAssistantServiceCallAction<> *api;
                  api = new api::HomeAssistantServiceCallAction<>(api_apiserver, true);
                  // Event id length limit is 32 characters
                  api->set_service("esphome.last_consumption_changes");
                  api->play();
                  id(event_quantity) = 0;
              }
            }
          }
          id(last_event_quantity) = id(event_quantity);
  # Track the current water consumption
  - interval: 2sec
    then:
      - lambda: |-
          if (id(event_quantity) != id(current_event_quantity)) {
            id(current_water_consumption).publish_state(id(event_quantity));
          }
          id(current_event_quantity) = id(event_quantity);

#--------------------------------------INTERNAL SENSORS⬇-----------------------------------------------#

text_sensor:
  - platform: dsmr
    identification:
      name: DSMR Identification
      internal: true
    p1_version:
      name: DSMR Version
      internal: true
    electricity_tariff:
      name: current tariff plan 
      id: CTP
    electricity_failure_log:
      name: "electricity failure log"
    message_short:
      name: "electricity meter message"
      #internal: true
    message_long:
      name: "electricity meter message long"
      internal: true
           
  - platform: wifi_info
    ip_address:
      name: IP-adres
      id: ip_adres
      icon: mdi:ip-network      
    ssid:
      name: Netwerk
      id: netwerk
      icon: mdi:access-point-network
      internal: true
    mac_address:
      name: Mac-adres
      id: mac_adres
      icon: mdi:folder-key-network-outline 
      internal: true

  - platform: version
    name: ESPHome Version
    hide_timestamp: true  
    internal: true

#--------------------------------------⬇Buttons⬇-----------------------------------------------#
button:    
  - platform: restart
    name: "${friendly_name} restart"
    entity_category: config   

  - platform: template
    name: "${friendly_name} reset main counter button"
    icon: "mdi:restart"
    on_press:
      - script.execute: reset_main_counter

  - platform: template
    name: "${friendly_name} reset secondary counter button"
    icon: "mdi:restart"
    on_press:
      - script.execute: reset_secondary_counter

